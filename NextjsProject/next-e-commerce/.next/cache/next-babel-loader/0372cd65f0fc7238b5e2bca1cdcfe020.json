{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { firebase, auth, db } from \"../config/firebase\";\nvar authContext = /*#__PURE__*/createContext();\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  var auth = useProvideAuth();\n  return /*#__PURE__*/_jsx(authContext.Provider, {\n    value: auth,\n    children: children\n  });\n}\nexport var useAuth = function useAuth() {\n  console.log(\"useAuth\");\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var getCurrentUser = function getCurrentUser() {\n    var _auth$currentUser;\n\n    ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid) ? db.collection(\"Users\").doc(auth.currentUser.uid).get().then(function (doc) {\n      setUser(doc.data());\n      setLoading(false);\n    }) : setLoading(false);\n  };\n\n  useEffect(function () {\n    var unsubscribe = firebase.auth().onAuthStateChanged(function () {\n      return getCurrentUser();\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  return {\n    user: user,\n    loading: loading,\n    setUser: setUser\n  };\n}","map":null,"metadata":{},"sourceType":"module"}