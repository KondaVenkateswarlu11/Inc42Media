{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { firebase, auth, db } from \"../config/firebase\";\nconst authContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsx(authContext.Provider, {\n    value: auth,\n    children: children\n  });\n}\nexport const useAuth = () => {\n  console.log(\"useAuth\");\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const getCurrentUser = () => {\n    var _auth$currentUser;\n\n    ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid) ? db.collection(\"Users\").doc(auth.currentUser.uid).get().then(doc => {\n      setUser(doc.data());\n      setLoading(false);\n    }) : setLoading(false);\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(() => getCurrentUser());\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    loading,\n    setUser\n  };\n}","map":null,"metadata":{},"sourceType":"module"}