{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { db } from \"@/config/firebase\";\nimport { useState, useEffect } from \"react\";\n\nconst useProduct = id => {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    async function fetchFromFirestore() {\n      db.collection(\"Products\").doc(id).get().then(function (doc) {\n        setData(doc.data());\n        setLoading(false);\n      }).catch(e => setError(e));\n    }\n\n    fetchFromFirestore();\n  }, [id]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\nconst useCategoryProducts = category => {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  useEffect(() => {\n    async function fetchFromFirestore() {\n      db.collection(\"Products\").where(\"category\", \"==\", category).get().then(function (querySnapshot) {\n        const products = querySnapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        setData(products);\n        setLoading(false);\n      }).catch(e => setError(e));\n    }\n\n    fetchFromFirestore();\n  }, [category]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\nexport { useProduct, useCategoryProducts };","map":null,"metadata":{},"sourceType":"module"}